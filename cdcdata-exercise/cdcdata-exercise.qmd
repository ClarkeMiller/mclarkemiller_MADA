---
title: "CDC Data Exercise"
author: "Clarke Miller"
---

## Data from CDC: COVID-19 Vaccinations in the United States

Data can be found at: https://data.cdc.gov/Vaccinations/COVID-19-Vaccinations-in-the-United-States-Jurisdi/unsk-b7fc/about_data

```{r}
#Call a bunch of libraries.
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
library(broom) 
suppressPackageStartupMessages(library(here))
library(readxl) 
library(dplyr) 
library(tidyr) 
library(skimr)
suppressPackageStartupMessages(library(kableExtra))

#Load excel data file
#Data file from CDC "COVID-19_Vaccinations_in_the_United_States_Jurisdiction_20240208"
data_location <- here::here("cdcdata-exercise","CDC_COVID-19_Vaccinations.xlsx")
CDC_data <- readxl::read_excel(data_location)

#Take a squinty
dplyr::glimpse(CDC_data)
summary(CDC_data)
head(CDC_data)
skimr::skim(CDC_data)
class(CDC_data $Location)

#Save a rds version
save_data_location <- here::here("cdcdata-exercise","CDC_data.rds")
saveRDS(CDC_data, file = save_data_location)

#Location, 
CDC_Filter <- CDC_data %>% 
  select(Location, Date, Dist_Per_100K, Admin_Per_100K, Distributed_Janssen, Distributed_Moderna, Distributed_Pfizer)

#Take another squinty
dplyr::glimpse(CDC_Filter)
summary(CDC_Filter)
head(CDC_Filter)
skimr::skim(CDC_Filter)

library("ggplot2")

plot_date_vs_dist <- ggplot(CDC_Filter, aes(x=Date, y=Dist_Per_100K)) + geom_point() + theme_classic() + labs(title = "Doses Distributed vs. Time", x="Time (Date)", y="Doses Distibuted Per 100K")

plot_date_vs_dist

plot_date_vs_admin <- ggplot(CDC_Filter, aes(x=Date, y=Admin_Per_100K)) + geom_point() + theme_classic() + labs(title = "Doses Administered vs. Time", x="Time (Date)", y="Doses Administrated Per 100K")

plot_date_vs_admin

```

```{r}
#Filtered to Georgia
CDC_SE_Filter <- CDC_Filter %>% filter(Location == "GA")
CDC_SE_Filter <- CDC_SE_Filter %>% filter(Location == "GA")
CDC_SE_Filter <- na.omit(CDC_SE_Filter)

library("ggplot2")

plot_date_vs_dist2 <- ggplot(CDC_SE_Filter, aes(x=Date, y=Dist_Per_100K)) + geom_point() + theme_classic() + labs(title = "Doses Distributed vs. Time", x="Time (Date)", y="Doses Distibuted Per 100K")

plot_date_vs_dist2

plot_date_vs_admin2 <- ggplot(CDC_SE_Filter, aes(x=Date, y=Admin_Per_100K)) + geom_point() + theme_classic() + labs(title = "Doses Administered vs. Time", x="Time (Date)", y="Doses Administrated Per 100K")

plot_date_vs_admin2

```

```{r}


CDC_SE_All <- CDC_Filter %>% filter(Location %in% c("FL", "GA", "VA", "TN", "NC", "SC", "AL", "KY", "MS"))
CDC_SE_All <- CDC_SE_All %>% filter(Location %in% c("FL", "GA", "VA", "TN", "NC", "SC", "AL", "KY", "MS"))
CDC_SE_All <- na.omit(CDC_SE_All)

#Take another squinty
dplyr::glimpse(CDC_SE_All)
summary(CDC_SE_All)
head(CDC_SE_All)
skimr::skim(CDC_SE_All)



CDC_plot3 <- ggplot(CDC_SE_All, aes(x = `Location`, y = Admin_Per_100K)) + geom_bar(stat = "identity", position = "dodge", color = "orange") +
labs(title = "Administration of COVID Vaccine by State", x = "State", y = "Admin Per 100K Pop") +  
guides(x =  guide_axis(angle = 90)) +
theme_minimal() 

CDC_plot3

```

Contribution made by Arlyn Santiago

*All the code below was generated using AI tools such as ChatGPT and Bard AI...*

```{r}
# Summary statistics for numerical variables using the CDC_SE_Filter dataset
num_summary <- lapply(CDC_SE_Filter, function(x) {
  if(is.numeric(x)) {
    min_val <- min(x, na.rm = TRUE)
    max_val <- max(x, na.rm = TRUE)
    c("Min" = min_val, "Max" = max_val)
  }
})

# Frequency table for categorical variables
cat_frequency <- lapply(CDC_SE_Filter, function(x) {
  if(is.factor(x) | is.character(x)) {
    table(x) / length(x)
  }
})
#nrows <- nrow(data) # Number of rows to generate
# Update the synthetic data generation function to accommodate both numerical summaries and categorical frequencies
generate_synthetic_data <- function(num_summary, cat_frequency, nrows) {
  synthetic_data <- data.frame(matrix(ncol = length(num_summary) + length(cat_frequency), nrow = nrows))
  
  # Add numerical data
  for (var_name in names(num_summary)) {
    if (!is.null(num_summary[[var_name]])) {
      synthetic_data[[var_name]] <- runif(nrows, min = num_summary[[var_name]]["Min"], max = num_summary[[var_name]]["Max"])
    }
  }
  
  # Add categorical data
  for (var_name in names(cat_frequency)) {
    if (!is.null(cat_frequency[[var_name]])) {
      categories <- names(cat_frequency[[var_name]])
      frequencies <- as.numeric(cat_frequency[[var_name]])
      synthetic_data[[var_name]] <- sample(categories, nrows, replace = TRUE, prob = frequencies)
    }
  }
  
  return(synthetic_data)
}

# Specify the number of rows for the synthetic dataset
#nrows <- nrow(original_data)

generate_synthetic_data <- function(num_summary, cat_frequency, nrows) {
  set.seed(123) # for reproducibility
  
  # Initialize an empty list to store synthetic data columns
  synthetic_data_list <- list()
  
  # Generate synthetic numerical variables
  for(var_name in names(num_summary)) {
    if (!is.null(num_summary[[var_name]])) {
      min_val <- num_summary[[var_name]]["Min"]
      max_val <- num_summary[[var_name]]["Max"]
      synthetic_data_list[[var_name]] <- runif(nrows, min = min_val, max = max_val)
    }
  }
  
  # Generate synthetic categorical variables
  for(var_name in names(cat_frequency)) {
    if (!is.null(cat_frequency[[var_name]])) {
      categories <- names(cat_frequency[[var_name]])
      frequencies <- as.numeric(cat_frequency[[var_name]])
      synthetic_data_list[[var_name]] <- sample(categories, nrows, replace = TRUE, prob = frequencies)
    }
  }
  
  # Convert the list to a data frame
  synthetic_data <- as.data.frame(synthetic_data_list)
  
  return(synthetic_data)
}

```
